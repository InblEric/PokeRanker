openapi: "3.0.0"
info:
  version: 1.0.0
  title: Pokemon Ranker
  license:
    name: MIT
servers:
  - url: http://127.0.0.1:5000/api/v1.0
paths:
  /ranks:
    get:
      summary: return rank data for all pokemon
      operationId: getRanks
      tags:
        - ranklist
      responses:
        '200':
          description: pokemon ranks
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ArrayOfUsers'
                $ref: '#/components/schemas/RankList'
    post:
      summary: update ranking based on who the user voted for
      requestBody:
        description: Rank vote from user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RankVote'
      operationId: rankPokemon
      tags:
        - vote
      responses:
        '201':
          description: ranking result created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultID'
  /pokemon/{pokemon_id}:
    get:
      summary: return ranking of specific pokemon
      parameters:
        - in: path
          name: pokemon_id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the pokemon to get the ranking of
      operationId: getPokemonRank
      tags:
        - pokemon
      responses:
        '200':
          description: Rank of specific pokemon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankData'
  /pokemon/{gen}/{pokemon_id}:
    get:
      summary: Return ranking of specific pokemon within its generation
      parameters:
        - in: path
          name: gen
          schema:
            type: integer
            format: int64
          required: true
          description: Which generation to get ranks from
        - in: path
          name: pokemon_id
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the pokemon to get the ranking of
      operationId: getPokemonRankGen
      tags:
        - pokemon
      responses:
        '200':
          description: Rank of specific pokemon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankData'
  /ranks/{gen}:
    get:
      summary: return rankings for specified generation
      parameters:
        - in: path
          name: gen
          schema:
            type: integer
            format: int64
          required: true
          description: Which generation to get ranks from
      operationId:  getRanksGen
      tags:
        - ranklist
      responses:
        '200':
          description: pokemon ranks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankList'
  /ranks/match:
    get:
      summary: return a head to head matchup between any two pokemon
      operationId: getMatch
      tags:
        - getmatch
      responses:
        '200':
          description: Matchup between two pokemon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchupData'
  /ranks/{gen}/match:
    get:
      summary: return a head to head matchup of a specific generation
      parameters:
        - in: path
          name: gen
          schema:
            type: integer
          required: true
          description: Which generation to get ranks from
      operationId: getMatchGen
      tags:
        - getmatch
      responses:
        '200':
          description: Matchup between two pokemon
          content:
            application/json:
              schema:
                #$ref: '#/components/schemas/ArrayOfUsers'
                $ref: '#/components/schemas/MatchupData'

components:
  schemas:

    RankList:
      type: array
      items:
        $ref: "#/components/schemas/RankData"
    RankVote:
      required:
        - winner_id
        - loser_id
      properties:
        winner_id:
          type: integer
          format: int64
        loser_id:
          type: integer
          format: int64
    ResultID:
      required:
        - vote_id
      properties:
        vote_id:
          type: integer
          format: int64
    RankData:
      required:
        - pokemon_id
        - name
        - gen
        - rank
        - genRank
      properties:
        pokemon_id:
          type: integer
          format: int64
        name:
          type: string
        gen:
          type: integer
          format: int64
        rank:
          type: integer
          format: int64
        genRank:
          type: integer
          format: int64
    MatchupData:
      required:
        - one
        - two
        - one_id
        - two_id
      properties:
        one:
          type: string
        two:
          type: string
        oneid:
          type: integer
        twoid:
          type: integer
